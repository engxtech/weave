import { useState, useRef, useCallback, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Play, Pause, Upload, Download, MessageSquare, Send, 
  Circle, Square, Type, Image, Volume2, Video, 
  Sparkles, Layers, Move, RotateCcw, Palette,
  Grid, Camera, Code, Zap, X
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { AppHeader } from '@/components/app-header';

// Revideo/Motion Canvas Timeline Element Types
interface TimelineElement {
  id: string;
  type: 'circle' | 'rect' | 'txt' | 'video' | 'audio' | 'image' | 'layout' | 'grid' | 'code' | 'effect';
  name: string;
  startTime: number;
  duration: number;
  properties: Record<string, any>;
  layer: number;
}

interface VideoProject {
  id: string;
  name: string;
  duration: number;
  elements: TimelineElement[];
  canvasSize: { width: number; height: number };
}

interface ChatMessage {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  actionType?: string;
}

function UnifiedVideoEditor() {
  const [project, setProject] = useState<VideoProject>({
    id: 'main-project',
    name: 'Untitled Project',
    duration: 30,
    elements: [],
    canvasSize: { width: 1920, height: 1080 }
  });
  
  const [selectedElement, setSelectedElement] = useState<TimelineElement | null>(null);
  const [currentTime, setCurrentTime] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      type: 'assistant',
      content: 'Welcome to the Unified Video Editor! I can help you create animations using Revideo and Motion Canvas. Try saying "Add a red circle" or "Create text animation"',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [processing, setProcessing] = useState(false);
  const [draggedElement, setDraggedElement] = useState<Partial<TimelineElement> | null>(null);
  const [showChatPanel, setShowChatPanel] = useState(false);
  const [uploadedVideo, setUploadedVideo] = useState<string | null>(null);
  const [videoFile, setVideoFile] = useState<File | null>(null);

  const timelineRef = useRef<HTMLDivElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const { toast } = useToast();

  // Motion Canvas / Revideo Component Library
  // Motion Canvas Components for the left panel
  const motionCanvasComponents = [
    { type: 'circle', name: 'Circle', icon: Circle, defaultProps: { radius: 50, fill: '#ff0000' } },
    { type: 'rect', name: 'Rectangle', icon: Square, defaultProps: { width: 100, height: 100, fill: '#0066ff' } },
    { type: 'txt', name: 'Text', icon: Type, defaultProps: { text: 'Hello', fontSize: 48, fill: '#ffffff' } },
    { type: 'video', name: 'Video', icon: Video, defaultProps: { src: '', width: 320, height: 240 } },
    { type: 'audio', name: 'Audio', icon: Volume2, defaultProps: { src: '', volume: 1 } },
    { type: 'image', name: 'Image', icon: Image, defaultProps: { src: '', width: 200, height: 200 } },
    { type: 'layout', name: 'Layout', icon: Grid, defaultProps: { direction: 'column', gap: 20 } },
    { type: 'effect', name: 'Effect', icon: Zap, defaultProps: { type: 'fade', duration: 1 } }
  ];

  const componentLibrary = [
    { type: 'circle', icon: Circle, name: 'Circle', category: 'shapes', props: { size: 100, fill: '#e13238' } },
    { type: 'rect', icon: Square, name: 'Rectangle', category: 'shapes', props: { width: 200, height: 100, fill: '#4285f4' } },
    { type: 'txt', icon: Type, name: 'Text', category: 'text', props: { text: 'Hello World', fontSize: 48, fill: '#ffffff' } },
    { type: 'video', icon: Video, name: 'Video', category: 'media', props: { src: '', size: [640, 360] } },
    { type: 'audio', icon: Volume2, name: 'Audio', category: 'media', props: { src: '', volume: 1 } },
    { type: 'image', icon: Image, name: 'Image', category: 'media', props: { src: '', size: [200, 200] } },
    { type: 'layout', icon: Layers, name: 'Layout', category: 'layout', props: { direction: 'row', gap: 20 } },
    { type: 'grid', icon: Grid, name: 'Grid', category: 'layout', props: { spacing: 50, stroke: '#666' } },
    { type: 'code', icon: Code, name: 'Code Block', category: 'advanced', props: { language: 'typescript', theme: 'dark' } },
    { type: 'effect', icon: Sparkles, name: 'Effect', category: 'advanced', props: { type: 'fade', intensity: 1 } }
  ];

  // AI Chat Handler
  const handleSendMessage = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputMessage.trim() || processing) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setProcessing(true);

    try {
      // Process AI command using Revideo/Motion Canvas knowledge
      const response = await fetch('/api/unified-revideo/ai-command', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          command: inputMessage,
          project: project,
          currentTime: currentTime
        })
      });

      if (!response.ok) throw new Error('AI command failed');
      
      const result = await response.json();
      
      const assistantMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: result.response || 'Command executed successfully!',
        timestamp: new Date(),
        actionType: result.actionType
      };

      setMessages(prev => [...prev, assistantMessage]);

      // Apply any timeline changes
      if (result.newElement) {
        const newElement: TimelineElement = {
          id: Date.now().toString(),
          ...result.newElement,
          startTime: currentTime,
          layer: project.elements.length
        };
        
        setProject(prev => ({
          ...prev,
          elements: [...prev.elements, newElement]
        }));

        toast({
          title: 'Element Added',
          description: `${result.newElement.type} added to timeline at ${currentTime}s`
        });
      }

    } catch (error) {
      console.error('AI command error:', error);
      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: 'Sorry, I encountered an error processing your command. Please try again.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setProcessing(false);
    }
  }, [inputMessage, processing, project, currentTime, toast]);

  // Drag and Drop Handlers
  const handleDragStart = useCallback((component: any) => {
    setDraggedElement({
      type: component.type,
      name: component.name,
      duration: 5, // Default 5 seconds
      properties: { ...component.props }
    });
  }, []);

  const handleTimelineDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    console.log('Timeline drop triggered', { draggedElement });
    
    if (!draggedElement || !timelineRef.current) {
      console.log('Drop failed: missing element or timeline ref');
      return;
    }

    const rect = timelineRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const timeScale = project.duration / rect.width;
    const dropTime = x * timeScale;

    const newElement: TimelineElement = {
      id: `${draggedElement.type}_${Date.now()}`,
      type: draggedElement.type as any,
      name: draggedElement.name || draggedElement.type || 'Element',
      startTime: Math.max(0, dropTime),
      duration: draggedElement.duration || 5,
      properties: { ...draggedElement.properties },
      layer: project.elements.length
    };

    console.log('Adding new element to timeline:', newElement);

    setProject(prev => {
      const updated = {
        ...prev,
        elements: [...prev.elements, newElement]
      };
      console.log('Updated project with elements:', updated.elements);
      return updated;
    });

    setDraggedElement(null);
    
    // Force canvas re-render
    setTimeout(() => {
      renderCanvas();
    }, 100);
    
    toast({
      title: 'Element Added',
      description: `${newElement.name} added at ${dropTime.toFixed(1)}s`
    });
  }, [draggedElement, project.duration, toast]);

  // Timeline Navigation
  const handleTimelineClick = useCallback((e: React.MouseEvent) => {
    if (!timelineRef.current) return;
    
    const rect = timelineRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const timeScale = project.duration / rect.width;
    const clickTime = x * timeScale;
    
    setCurrentTime(Math.max(0, Math.min(clickTime, project.duration)));
  }, [project.duration]);

  // Video Upload
  const handleVideoUpload = useCallback(async (file: File) => {
    try {
      const formData = new FormData();
      formData.append('video', file);

      const response = await fetch('/api/upload-video', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Failed to upload video');
      }

      const result = await response.json();
      setUploadedVideo(result.filename);
      setVideoFile(file);
      
      toast({
        title: "Video uploaded successfully",
        description: `${file.name} is ready for editing`,
      });
    } catch (error) {
      console.error('Video upload error:', error);
      toast({
        title: "Upload failed",
        description: "Failed to upload video file",
        variant: "destructive",
      });
    }
  }, [toast]);

  const handleFileInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file && file.type.startsWith('video/')) {
      handleVideoUpload(file);
    } else {
      toast({
        title: "Invalid file type",
        description: "Please select a video file",
        variant: "destructive",
      });
    }
  }, [handleVideoUpload, toast]);

  // Video Export
  const handleExport = useCallback(async () => {
    try {
      setProcessing(true);
      
      const response = await fetch('/api/unified-revideo/export', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          project: project,
          format: 'mp4',
          quality: 'high'
        })
      });

      if (!response.ok) throw new Error('Export failed');
      
      const result = await response.json();
      
      if (result.success && result.downloadUrl) {
        // Trigger download
        const link = document.createElement('a');
        link.href = result.downloadUrl;
        link.download = result.filename || 'exported-video.mp4';
        link.click();
        
        toast({
          title: 'Export Complete',
          description: 'Your video has been exported successfully!'
        });
      }
    } catch (error) {
      console.error('Export error:', error);
      toast({
        title: 'Export Failed',
        description: 'Failed to export video. Please try again.',
        variant: 'destructive'
      });
    } finally {
      setProcessing(false);
    }
  }, [project, toast]);

  // Playback Controls
  const togglePlayback = useCallback(() => {
    setIsPlaying(prev => !prev);
  }, []);

  // Format time for display
  const formatTime = useCallback((time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  }, []);

  return (
    <div className="min-h-screen bg-slate-950 flex flex-col">
      {/* Consistent Header */}
      <AppHeader />
      
      {/* Main Editor Content */}
      <div className="flex-1 flex relative">
        {/* Left Components Panel */}
        <div className="w-80 bg-slate-900/95 backdrop-blur-xl border-r border-slate-800">
          {/* Components Header */}
          <div className="p-4 border-b border-slate-800">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gradient-to-br from-cyan-500 to-blue-500 rounded-full flex items-center justify-center">
                <Layers className="w-4 h-4 text-white" />
              </div>
              <div>
                <h2 className="text-white font-semibold text-sm">Motion Canvas</h2>
                <p className="text-slate-400 text-xs">Components Library</p>
              </div>
            </div>
          </div>

          {/* Components Grid */}
          <ScrollArea className="h-[calc(100vh-12rem)]">
            <div className="p-4">
              <div className="grid grid-cols-2 gap-3">
                {motionCanvasComponents.map((component) => (
                  <div
                    key={component.type}
                    draggable
                    onDragStart={(e) => {
                      setDraggedElement({
                        type: component.type as any,
                        name: component.name,
                        duration: 5,
                        properties: component.defaultProps
                      });
                    }}
                    className="group relative bg-slate-800/50 hover:bg-slate-700/50 border border-slate-700/50 hover:border-cyan-500/50 rounded-lg p-3 cursor-grab active:cursor-grabbing transition-all duration-200 hover:scale-105"
                  >
                    <div className="flex flex-col items-center gap-2">
                      <div className="w-10 h-10 bg-gradient-to-br from-cyan-500/20 to-blue-500/20 rounded-lg flex items-center justify-center group-hover:from-cyan-500/30 group-hover:to-blue-500/30 transition-all">
                        <component.icon className="w-5 h-5 text-cyan-400" />
                      </div>
                      <span className="text-xs text-slate-300 text-center font-medium">{component.name}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </ScrollArea>
        </div>

        {/* Main Video Editor */}
        <div className="flex-1 flex flex-col">
          <div className="flex h-full">
            {/* Video Preview and Timeline */}
            <div className="flex-1 flex flex-col">
          {/* Project Info Bar */}
          <div className="h-12 bg-slate-900/90 backdrop-blur-sm border-b border-slate-800 flex items-center justify-between px-6">
            <div className="flex items-center gap-4">
              <h2 className="text-white font-medium">{project.name}</h2>
              <Badge variant="outline" className="text-slate-400 border-slate-600 text-xs">
                {project.elements.length} elements
              </Badge>
              {uploadedVideo && (
                <Badge variant="outline" className="text-green-400 border-green-500/50 text-xs">
                  Video Loaded: {videoFile?.name}
                </Badge>
              )}
            </div>
            
            <div className="flex items-center gap-3">
              <input
                type="file"
                accept="video/*"
                onChange={handleFileInputChange}
                className="hidden"
                id="video-upload-input"
              />
              <Button
                onClick={() => document.getElementById('video-upload-input')?.click()}
                size="sm"
                variant="outline"
                className="border-blue-500/50 text-blue-300 hover:bg-blue-500/20"
              >
                <Upload className="w-4 h-4 mr-2" />
                Upload Video
              </Button>
              <Button
                onClick={handleExport}
                disabled={processing || project.elements.length === 0}
                size="sm"
                className="bg-gradient-to-r from-cyan-600 to-purple-600 hover:from-cyan-700 hover:to-purple-700"
              >
                <Download className="w-4 h-4 mr-2" />
                Export MP4
              </Button>
            </div>
          </div>

          {/* Video Preview Area */}
          <div className="flex-1 bg-slate-900 flex items-center justify-center p-6">
            <div className="w-full max-w-5xl">
              <Card className="bg-black border-slate-800/50 shadow-2xl">
                <CardContent className="p-0">
                  <div className="aspect-video bg-slate-950 rounded-lg overflow-hidden relative">
                    {uploadedVideo && (
                      <video 
                        controls 
                        className="w-full h-full object-contain absolute inset-0 z-0"
                        src={`/api/video/${uploadedVideo}`}
                      />
                    )}
                    <canvas
                      ref={canvasRef}
                      width={project.canvasSize.width}
                      height={project.canvasSize.height}
                      className="w-full h-full object-contain relative z-10"
                      style={{ backgroundColor: uploadedVideo ? 'transparent' : 'rgb(2 6 23)' }}
                    />
                    
                    {/* Playback Overlay */}
                    <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent">
                      <div className="absolute bottom-4 left-4 right-4">
                        <div className="flex items-center gap-4 text-white">
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={togglePlayback}
                            className="text-white hover:bg-white/20 backdrop-blur-sm"
                          >
                            {isPlaying ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}
                          </Button>
                          
                          <div className="flex-1">
                            <div className="text-xs mb-1 font-medium">
                              {formatTime(currentTime)} / {formatTime(project.duration)}
                            </div>
                            <div className="w-full bg-slate-700/50 h-2 rounded-full backdrop-blur-sm">
                              <div 
                                className="bg-gradient-to-r from-purple-500 to-pink-500 h-2 rounded-full transition-all"
                                style={{ width: `${(currentTime / project.duration) * 100}%` }}
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          {/* Timeline Area */}
          <div className="h-64 bg-slate-900/95 backdrop-blur-sm border-t border-slate-800/50">
            <div className="h-full flex flex-col">
              {/* Timeline Header */}
              <div className="h-10 bg-slate-800/50 border-b border-slate-700/50 flex items-center px-4">
                <div className="flex items-center gap-4">
                  <h3 className="text-white font-medium text-sm">Timeline</h3>
                  <div className="text-slate-400 text-xs">
                    Duration: {project.duration}s
                  </div>
                  <div className="text-slate-500 text-xs">
                    Canvas: {project.canvasSize.width}×{project.canvasSize.height}
                  </div>
                </div>
              </div>

              {/* Timeline Content */}
              <div className="flex-1 relative">
                {/* Time Ruler */}
                <div className="h-8 bg-slate-800/30 border-b border-slate-700/50 relative">
                  {Array.from({ length: Math.ceil(project.duration / 5) }, (_, i) => (
                    <div
                      key={i}
                      className="absolute top-0 bottom-0 border-l border-slate-600/50"
                      style={{ left: `${(i * 5 / project.duration) * 100}%` }}
                    >
                      <span className="text-xs text-slate-400 ml-1">{i * 5}s</span>
                    </div>
                  ))}
                  
                  {/* Playhead */}
                  <div
                    className="absolute top-0 bottom-0 w-0.5 bg-gradient-to-b from-purple-400 to-pink-400 z-10 shadow-lg"
                    style={{ left: `${(currentTime / project.duration) * 100}%` }}
                  />
                </div>

                {/* Timeline Tracks */}
                <div
                  ref={timelineRef}
                  className="flex-1 relative overflow-auto bg-slate-900/50"
                  onDrop={handleTimelineDrop}
                  onDragOver={(e) => e.preventDefault()}
                  onClick={handleTimelineClick}
                >
                  {/* Drop Zone Overlay */}
                  {project.elements.length === 0 && (
                    <div className="absolute inset-0 flex items-center justify-center">
                      <div className="text-center">
                        <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-slate-800/50 flex items-center justify-center">
                          <Layers className="w-8 h-8 text-slate-500" />
                        </div>
                        <p className="text-slate-400 text-sm">Drop components here or use AI commands</p>
                        <p className="text-slate-500 text-xs mt-1">Try "add a red circle" in chat</p>
                      </div>
                    </div>
                  )}

                  {/* Render Timeline Elements */}
                  {project.elements.map((element, index) => {
                    const getElementColor = (type: string) => {
                      switch (type) {
                        case 'circle': return 'from-red-600/90 to-red-500/90 border-red-400/50';
                        case 'rect': return 'from-blue-600/90 to-blue-500/90 border-blue-400/50';
                        case 'txt': return 'from-green-600/90 to-green-500/90 border-green-400/50';
                        case 'video': return 'from-purple-600/90 to-purple-500/90 border-purple-400/50';
                        case 'audio': return 'from-orange-600/90 to-orange-500/90 border-orange-400/50';
                        case 'image': return 'from-pink-600/90 to-pink-500/90 border-pink-400/50';
                        case 'layout': return 'from-cyan-600/90 to-cyan-500/90 border-cyan-400/50';
                        case 'effect': return 'from-yellow-600/90 to-yellow-500/90 border-yellow-400/50';
                        default: return 'from-slate-600/90 to-slate-500/90 border-slate-400/50';
                      }
                    };
                    
                    return (
                      <div
                        key={element.id}
                        className={`absolute h-12 bg-gradient-to-r ${getElementColor(element.type)} rounded-lg cursor-pointer hover:brightness-110 hover:scale-105 transition-all duration-200 shadow-lg backdrop-blur-sm ${
                          selectedElement?.id === element.id ? 'ring-2 ring-cyan-400 ring-opacity-75' : ''
                        }`}
                        style={{
                          left: `${(element.startTime / project.duration) * 100}%`,
                          width: `${(element.duration / project.duration) * 100}%`,
                          top: `${8 + (index * 56)}px`
                        }}
                        onClick={(e) => {
                          e.stopPropagation();
                          setSelectedElement(element);
                        }}
                      >
                        <div className="p-3 text-white text-xs h-full flex items-center justify-between">
                          <span className="font-medium truncate">{element.name}</span>
                          <span className="text-xs opacity-70 uppercase">{element.type}</span>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>

            {/* Right Chat Panel */}
            <div className="w-80 bg-slate-900/95 backdrop-blur-xl border-l border-slate-800 flex flex-col">
              {/* Chat Header */}
              <div className="p-4 border-b border-slate-800">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                    <MessageSquare className="w-4 h-4 text-white" />
                  </div>
                  <div>
                    <h2 className="text-white font-semibold text-sm">AI Assistant</h2>
                    <p className="text-slate-400 text-xs">Natural Language Commands</p>
                  </div>
                </div>
              </div>

              {/* Chat Messages */}
              <ScrollArea className="flex-1 p-4">
                <div className="space-y-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div
                        className={`max-w-[85%] p-3 rounded-lg ${
                          message.type === 'user'
                            ? 'bg-purple-600 text-white'
                            : 'bg-slate-800 text-slate-200'
                        }`}
                      >
                        <p className="text-sm">{message.content}</p>
                        {message.actionType && (
                          <Badge variant="secondary" className="mt-2 text-xs">
                            {message.actionType}
                          </Badge>
                        )}
                      </div>
                    </div>
                  ))}
                  {processing && (
                    <div className="flex justify-start">
                      <div className="bg-slate-800 text-slate-200 p-3 rounded-lg">
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-purple-400 rounded-full animate-pulse"></div>
                          <span className="text-sm">Processing...</span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </ScrollArea>

              {/* Chat Input */}
              <div className="p-4 border-t border-slate-800">
                <form onSubmit={handleSendMessage} className="flex gap-2">
                  <Input
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    placeholder="Add a red circle, create text animation..."
                    disabled={processing}
                    className="bg-slate-800 border-slate-700 text-white placeholder-slate-400"
                  />
                  <Button
                    type="submit"
                    size="icon"
                    disabled={!inputMessage.trim() || processing}
                    className="bg-purple-600 hover:bg-purple-700 shrink-0"
                  >
                    <Send className="w-4 h-4" />
                  </Button>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default UnifiedVideoEditor;